# modules/devlake/alb.tf - Application Load Balancer

module "devlake_alb" {
  source  = "terraform-aws-modules/alb/aws"
  version = "~> 9.13.0"

  name               = "devlake-alb"
  load_balancer_type = "application"
  internal           = false

  vpc_id          = var.vpc_id
  subnets         = var.public_subnets
  security_groups = [aws_security_group.alb.id]

  # Listeners
  listeners = {
    # HTTP Listener - Redirect to HTTPS
    http = {
      port     = 80
      protocol = "HTTP"
      
      redirect = {
        port        = "443"
        protocol    = "HTTPS"
        status_code = "HTTP_301"
      }
    }

    # HTTPS Listener
    https = {
      port            = 443
      protocol        = "HTTPS"
      ssl_policy      = "ELBSecurityPolicy-TLS13-1-2-Res-2021-06"
      certificate_arn = var.certificate_arn

      # Ação padrão - Forward para Config UI
      forward = {
        target_group_key = "devlake-config-ui-tg"
      }

      # Regras de roteamento
      rules = {
        # Regra para Grafana
        grafana = {
          priority = 100
          
          actions = [{
            type             = "forward"
            target_group_key = "devlake-grafana-tg"
          }]
          
          conditions = [{
            host_header = {
              values = ["devlake.${var.domain_name}"]
            }
            path_pattern = {
              values = ["/grafana", "/grafana/*"]
            }
          }]
        }
      }
    }
  }

  # Target Groups
  target_groups = {
    # Target Group para Grafana
    "devlake-grafana-tg" = {
      name        = "devlake-grafana-tg"
      protocol    = "HTTP"
      port        = 3000
      target_type = "ip"
      
      health_check = {
        enabled             = true
        interval            = 30
        path                = "/api/health"
        port                = "traffic-port"
        timeout             = 5
        healthy_threshold   = 3
        unhealthy_threshold = 3
        matcher             = "200"
      }
      
      create_attachment = false
    }

    # Target Group para Config UI
    "devlake-config-ui-tg" = {
      name        = "devlake-config-ui-tg"
      protocol    = "HTTP"
      port        = 4000
      target_type = "ip"
      
      health_check = {
        enabled             = true
        interval            = 30
        path                = "/"
        port                = "traffic-port"
        timeout             = 5
        healthy_threshold   = 3
        unhealthy_threshold = 3
        matcher             = "200"
      }
      
      create_attachment = false
    }
  }

  tags = {
    Name = var.tag_name
  }
}

# Target Group Attachments para ECS Services
resource "aws_lb_target_group_attachment" "grafana" {
  count = 1

  target_group_arn = module.devlake_alb.target_groups["devlake-grafana-tg"].arn
  target_id        = aws_ecs_service.grafana.network_configuration[0].assign_public_ip ? "" : ""
  port             = 3000

  # Como estamos usando Service Discovery, não precisamos anexar IPs específicos
  # O ECS irá gerenciar automaticamente os targets
  lifecycle {
    ignore_changes = [target_id]
  }

  depends_on = [aws_ecs_service.grafana]
}

resource "aws_lb_target_group_attachment" "config_ui" {
  count = 1

  target_group_arn = module.devlake_alb.target_groups["devlake-config-ui-tg"].arn
  target_id        = aws_ecs_service.config_ui.network_configuration[0].assign_public_ip ? "" : ""
  port             = 4000

  # Como estamos usando Service Discovery, não precisamos anexar IPs específicos
  # O ECS irá gerenciar automaticamente os targets
  lifecycle {
    ignore_changes = [target_id]
  }

  depends_on = [aws_ecs_service.config_ui]
}