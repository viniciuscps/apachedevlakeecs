#!/bin/bash
# change-db-password.sh - Trocar senha do banco de dados

set -e

echo "üîë TROCAR SENHA DO BANCO DE DADOS"
echo ""

echo "‚ùå PROBLEMA: Senha atual 'Priscila#01A' pode ter caracteres problem√°ticos"
echo "‚úÖ SOLU√á√ÉO: Usar senha simples sem caracteres especiais"
echo ""

# 1. Gerar nova senha simples
echo "1. Gerando nova senha simples..."

# Senha sem caracteres especiais que podem causar problemas
NEW_PASSWORD="DevLakePwd2025"

echo "Nova senha sugerida: $NEW_PASSWORD"
echo ""
echo "Caracter√≠sticas da nova senha:"
echo "  ‚úÖ Sem caracteres especiais (#, @, &, etc.)"
echo "  ‚úÖ Alfanum√©rica simples"
echo "  ‚úÖ F√°cil de debugar"
echo ""

read -p "Usar esta senha ou digite uma personalizada: " -r
if [ ! -z "$REPLY" ]; then
    NEW_PASSWORD="$REPLY"
fi

echo "Senha escolhida: $NEW_PASSWORD"
echo ""

# 2. Atualizar terraform.tfvars
echo "2. Atualizando terraform.tfvars..."

if [ -f "terraform.tfvars" ]; then
    # Backup
    cp terraform.tfvars terraform.tfvars.backup.$(date +%Y%m%d-%H%M%S)
    
    # Atualizar senha
    sed -i "s/^db_password\s*=.*/db_password = \"$NEW_PASSWORD\"/" terraform.tfvars
    
    echo "‚úÖ terraform.tfvars atualizado"
    
    # Mostrar linha atualizada
    echo "Nova linha:"
    grep "db_password" terraform.tfvars
else
    echo "‚ùå terraform.tfvars n√£o encontrado!"
    exit 1
fi

echo ""
echo "3. Verificando RDS atual..."

RDS_STATUS=$(aws rds describe-db-instances --db-instance-identifier devlake-db --query 'DBInstances[0].DBInstanceStatus' --output text 2>/dev/null || echo "NOT_FOUND")

if [ "$RDS_STATUS" = "NOT_FOUND" ]; then
    echo "‚úÖ RDS n√£o existe, ser√° criado com nova senha"
    
    echo ""
    echo "4. Aplicando configura√ß√£o com nova senha..."
    terraform apply -auto-approve
    
else
    echo "‚ö†Ô∏è RDS existe com senha antiga: $RDS_STATUS"
    echo ""
    echo "OP√á√ïES:"
    echo "1. üîÑ Modificar senha do RDS existente (r√°pido)"
    echo "2. üóëÔ∏è Remover RDS e recriar com nova senha (limpo)"
    echo ""
    
    read -p "Escolha uma op√ß√£o (1/2): " -n 1 -r
    echo
    
    case $REPLY in
        1)
            echo "Op√ß√£o 1: Modificando senha do RDS existente..."
            
            echo "Aguardando RDS estar dispon√≠vel para modifica√ß√£o..."
            aws rds wait db-instance-available --db-instance-identifier devlake-db || echo "Continuando mesmo se n√£o dispon√≠vel..."
            
            echo "Modificando senha..."
            aws rds modify-db-instance \
                --db-instance-identifier devlake-db \
                --master-user-password "$NEW_PASSWORD" \
                --apply-immediately
            
            echo "Aguardando modifica√ß√£o completar..."
            aws rds wait db-instance-available --db-instance-identifier devlake-db || echo "Timeout, mas continuando..."
            
            echo "‚úÖ Senha do RDS modificada"
            ;;
            
        2)
            echo "Op√ß√£o 2: Removendo RDS e recriando..."
            
            # Backup
            BACKUP_NAME="devlake-pre-password-change-$(date +%Y%m%d-%H%M%S)"
            echo "Criando backup: $BACKUP_NAME"
            aws rds create-db-snapshot --db-instance-identifier devlake-db --db-snapshot-identifier "$BACKUP_NAME" 2>/dev/null || echo "‚ö†Ô∏è Falha no backup"
            
            # Remover prote√ß√£o
            echo "Removendo prote√ß√£o de dele√ß√£o..."
            aws rds modify-db-instance --db-instance-identifier devlake-db --no-deletion-protection --apply-immediately 2>/dev/null || true
            sleep 15
            
            # Remover RDS
            echo "Removendo RDS..."
            aws rds delete-db-instance --db-instance-identifier devlake-db --skip-final-snapshot --delete-automated-backups
            
            echo "Aguardando remo√ß√£o..."
            aws rds wait db-instance-deleted --db-instance-identifier devlake-db || echo "Timeout, mas continuando..."
            
            # Limpar state
            terraform state rm 'module.devlake.module.devlake-rds.module.db_instance.aws_db_instance.this[0]' 2>/dev/null || true
            
            echo "‚úÖ RDS removido"
            ;;
            
        *)
            echo "‚ùå Op√ß√£o inv√°lida"
            exit 1
            ;;
    esac
    
    echo ""
    echo "4. Aplicando nova configura√ß√£o..."
    terraform refresh
    terraform apply -auto-approve
fi

if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ SENHA ALTERADA COM SUCESSO!"
    
    echo ""
    echo "5. Aguardando RDS ficar dispon√≠vel..."
    sleep 60
    
    NEW_RDS_STATUS=$(aws rds describe-db-instances --db-instance-identifier devlake-db --query 'DBInstances[0].DBInstanceStatus' --output text 2>/dev/null || echo "NOT_FOUND")
    echo "Status do RDS: $NEW_RDS_STATUS"
    
    if [ "$NEW_RDS_STATUS" = "available" ]; then
        echo "‚úÖ RDS dispon√≠vel com nova senha"
        
        echo ""
        echo "6. Atualizando DevLake com nova senha..."
        
        # Parar servi√ßo DevLake
        echo "Parando servi√ßo DevLake..."
        aws ecs update-service --cluster devlake-cluster --service devlake --desired-count 0 >/dev/null
        sleep 30
        
        # For√ßar nova task definition
        echo "Atualizando task definition..."
        terraform apply -target="module.devlake.aws_ecs_task_definition.devlake" -auto-approve
        
        # Reativar servi√ßo
        echo "Reativando servi√ßo DevLake..."
        terraform apply -target="module.devlake.aws_ecs_service.devlake" -auto-approve
        
        echo ""
        echo "7. Aguardando DevLake conectar com nova senha..."
        sleep 120
        
        echo ""
        echo "8. Verificando logs..."
        aws logs tail /ecs/devlake --since 3m --format short | tail -15 2>/dev/null || echo "Logs n√£o dispon√≠veis ainda"
        
        echo ""
        echo "9. Verificando se erro foi corrigido..."
        
        if aws logs tail /ecs/devlake --since 3m 2>/dev/null | grep -q 'parse.*mysql://devlake'; then
            echo "‚ö†Ô∏è Ainda h√° problemas na string de conex√£o"
            echo "Execute './force-fix-db-url.sh' para corrigir"
        else
            echo "‚úÖ Erro de parsing corrigido!"
            
            # Verificar sinais de sucesso
            if aws logs tail /ecs/devlake --since 2m 2>/dev/null | grep -q -E "(server started|listening|ready|connected)"; then
                echo "üéâ DEVLAKE FUNCIONANDO!"
                echo ""
                echo "üåê URLs de acesso:"
                echo "  ‚Ä¢ https://devlake.devlaketoco.com"
                echo "  ‚Ä¢ https://devlake.devlaketoco.com/grafana"
                
            else
                echo "‚ö†Ô∏è DevLake ainda inicializando..."
                echo "Execute: aws logs tail /ecs/devlake --follow"
            fi
        fi
        
    elif [ "$NEW_RDS_STATUS" = "creating" ] || [ "$NEW_RDS_STATUS" = "modifying" ]; then
        echo "‚ö†Ô∏è RDS ainda sendo processado..."
        echo "Aguarde alguns minutos e execute './monitor.sh'"
        
    else
        echo "‚ö†Ô∏è RDS em estado inesperado: $NEW_RDS_STATUS"
    fi
    
else
    echo "‚ùå Falha na aplica√ß√£o do Terraform"
    exit 1
fi

echo ""
echo "üìã RESUMO:"
echo "  ‚Ä¢ Nova senha: $NEW_PASSWORD"
echo "  ‚Ä¢ Arquivo terraform.tfvars atualizado"
echo "  ‚Ä¢ RDS configurado com nova senha"
echo "  ‚Ä¢ DevLake deve conectar sem problemas de parsing"
echo ""
echo "üîß Troca de senha conclu√≠da!"